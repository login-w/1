/*
SQLyog Professional v12.08 (64 bit)
MySQL - 5.5.62 : Database - blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `blog`;

/*Table structure for table `t_blog` */

DROP TABLE IF EXISTS `t_blog`;

CREATE TABLE `t_blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `appreciation` bit(1) NOT NULL DEFAULT b'0',
  `commentabled` bit(1) NOT NULL DEFAULT b'0',
  `content` longtext,
  `create_time` datetime DEFAULT NULL,
  `first_picture` longtext,
  `flag` varchar(255) DEFAULT NULL,
  `published` bit(1) NOT NULL DEFAULT b'0',
  `recommed` bit(1) NOT NULL DEFAULT b'0',
  `title` varchar(255) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `views` int(11) DEFAULT '0',
  `type_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `description` longtext,
  PRIMARY KEY (`id`),
  KEY `FK292449gwg5yf7ocdlmswv9w4j` (`type_id`),
  KEY `FK8ky5rrsxh01nkhctmo7d48p82` (`user_id`),
  CONSTRAINT `FK292449gwg5yf7ocdlmswv9w4j` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`),
  CONSTRAINT `FK8ky5rrsxh01nkhctmo7d48p82` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;

/*Data for the table `t_blog` */

insert  into `t_blog`(`id`,`appreciation`,`commentabled`,`content`,`create_time`,`first_picture`,`flag`,`published`,`recommed`,`title`,`update_time`,`views`,`type_id`,`user_id`,`description`) values (11,'','','test','2020-11-11 09:09:46','https://unsplash.it/800/600?image=1032','原创','','','hahahah','2020-12-28 16:42:49',28,38,1,'Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的高级程序设计语言。\r\n\r\nJava 可运行于多个平台，如 Windows, Mac OS 及其他多种 UNIX 版本的系统。\r\n\r\n本教程通过简单的实例将让大家更好的了解 Java 编程语言。\r\n\r\n移动操作系统 Android 大部分的代码采用 Java 编程语言编程。'),(14,'','','                    [TOC]\r\n                    #### Disabled options\r\n                    - TeX (Based on KaTeX);\r\n                    - Emoji;\r\n                    - Task lists;\r\n                    - HTML tags decode;\r\n                    - Flowchart and Sequence Diagram;\r\n                    ','2020-11-11 16:34:01','https://unsplash.it/800/600?image=1033','原创','','','spring入门到入坟','2020-11-15 09:35:33',283,38,1,'Spring框架是一个轻量级的解决方案，可以一站式地构建企业级应用。\r\nSpring是模块化的，所以可以只使用其中需要的部分。\r\n可以在任何web框架上使用控制反转（IoC），也可以只使用Hibernate集成代码或JDBC抽象层。\r\n它支持声明式事务管理、通过RMI或web服务实现远程访问，并可以使用多种方式持久化数据。\r\n它提供了功能全面的MVC框架，可以透明地集成AOP到软件中。'),(26,'','','这是我的java心得','2020-11-12 09:24:29','https://unsplash.it/800/600?image=1070','原创','','\0','java太好玩了吧','2020-11-15 09:35:37',55,54,1,'这是我的java心得，有不严谨地方，欢迎各位大佬指正。'),(27,'','','java多线程之入门篇','2020-11-12 09:26:17','https://unsplash.it/800/600?image=1025','原创','','\0','多线程','2020-11-15 09:35:45',62,54,1,'java多线程入门到入坟'),(28,'\0','','这是一篇java博客','2020-11-12 14:16:51','https://unsplash.it/800/600?image=1033','原创','','','java','2020-11-15 09:35:50',4,54,2,'啊啊啊啊'),(36,'\0','\0','啊飒飒','2020-11-12 14:42:18','https://unsplash.it/800/600?image=1033','原创','','\0','多线程并发','2020-11-12 14:42:18',14,52,1,''),(37,'','','2020-11-13 22:29:59 星期五\r\n<div id=\"content\" class=\"js-toc-content typo typo-selection m-padded-lr-resposive m-padded-tb-large\" th:utext=\"${blog.content}\">\r\n               <ol id=\"table\">\r\n                   <li><a href=\"#section1\">关于 <i class=\"serif\">Typo.css</i></a></li>\r\n                   <li><a href=\"#section2\">排版实例</a>\r\n                       <ul>\r\n                           <li><a href=\"#section2-1\">例1：论语学而篇第一</a></li>\r\n                           <li><a href=\"#section2-2\">例2：英文排版</a></li>\r\n                       </ul>\r\n                   </li>\r\n                   <li><a href=\"#section3\">附录</a>\r\n                       <ul>\r\n                           <li><a href=\"#appendix1\"><i class=\"serif\">Typo.css</i> 排版偏重点</a></li>\r\n                           <li><a href=\"#appendix2\">开源许可</a></li>\r\n                       </ul>\r\n                   </li>\r\n               </ol>\r\n			   <ol>\r\n\r\n<h2 id=\"section1\">一、关于 <i class=\"serif\">Typo.css</i></h2>\r\n\r\n               <p><i class=\"serif\">Typo.css</i> 的目的是，在一致化浏览器排版效果的同时，构建最适合中文阅读的网页排版。</p>\r\n               <h4>现状和如何去做：</h4>\r\n\r\n               <p class=\"typo-first\">排版是一个麻烦的问题 <sup><a href=\"#appendix1\"># 附录一</a></sup>，需要精心设计，而这个设计却是常被视觉设计师所忽略的。前端工程师更常看到这样的问题，但不便变更。因为在多个 OS 中的不同浏览器渲染不同，改动需要多的时间做回归测试，所以改变变得更困难。而像我们一般使用的\r\n                   Yahoo、Eric Meyer 和 Alice base.css 中采用的 Reset 都没有很好地考虑中文排版。<i class=\"serif\">Typo.css</i> 要做的就是解决中文排版的问题。</p>\r\n\r\n               <p><strong><i class=\"serif\">Typo.css</i> 测试于如下平台：</strong></p>\r\n               <table class=\"ui table\" summary=\"Typo.css 的测试平台列表\">\r\n                   <thead>\r\n                   <tr>\r\n                       <th>OS/浏览器</th>\r\n                       <th>Firefox</th>\r\n                       <th>Chrome</th>\r\n                       <th>Safari</th>\r\n                       <th>Opera</th>\r\n                       <th>IE9</th>\r\n                       <th>IE8</th>\r\n                       <th>IE7</th>\r\n                       <th>IE6</th>\r\n                   </tr>\r\n                   </thead>\r\n                   <tbody>\r\n                   <tr>\r\n                       <td>OS X</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>-</td>\r\n                       <td>-</td>\r\n                       <td>-</td>\r\n                       <td>-</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>Win 7</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>-</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>Win XP</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>-</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>Ubuntu</td>\r\n                       <td>✔</td>\r\n                       <td>✔</td>\r\n                       <td>-</td>\r\n                       <td>✔</td>\r\n                       <td>-</td>\r\n                       <td>-</td>\r\n                       <td>-</td>\r\n                       <td>-</td>\r\n                   </tr>\r\n                   </tbody>\r\n               </table>\r\n\r\n               <h4>中文排版的重点和难点</h4>\r\n\r\n               <p>在中文排版中，HTML4 的很多标准在语义在都有照顾到。但从视觉效果上，却很难利用单独的 CSS 来实现，像<abbr title=\"在文字下多加一个点\">着重号</abbr>（例：这里<em class=\"typo-em\">强调一下</em>）。在 HTML4 中，专名号标签（<code>&lt;u&gt;</code>）已经被放弃，而\r\n                   HTML5 被<a href=\"//html5doctor.com/u-element/\">重新提起</a>。<i class=\"serif\">Typo.css</i> 也根据实际情况提供相应的方案。我们重要要注意的两点是：</p>\r\n               <ol>\r\n                   <li>语义：语义对应的用法和样式是否与中文排版一致</li>\r\n                   <li>表现：在各浏览器中的字体、大小和缩放是否如排版预期</li>\r\n               </ol>\r\n               <p>对于这些，<i class=\"serif\">Typo.css</i> 排版项目的中文偏重注意点，都添加在附录中，详见：</p>\r\n               <blockquote>\r\n                   <b>附录一</b>：<a href=\"#appendix1\"><i class=\"serif\">Typo.css</i> 排版偏重点</a>\r\n               </blockquote>\r\n\r\n               <p>目前已有像百姓网等全面使用 <i class=\"serif\">Typo.css</i> 的项目，测试平台的覆盖，特别是在<abbr title=\"手机、平板电脑等移动平台\">移动端</abbr>上还没有覆盖完主流平台，希望有能力的同学能加入测试行列，或者加入到 <i class=\"serif\">Typo.css</i>\r\n                   的开发。加入方法：<a href=\"https://github.com/sofish/Typo.css\">参与 <i class=\"serif\">Typo.css</i> 开发</a>。如有批评、建议和意见，也随时欢迎给在 Github 直接提 <a\r\n                           href=\"https://github.com/sofish/Typo.css/issues\">issues</a>，或给<abbr title=\"Sofish Lin, author of Typo.css\"\r\n                                                                                               role=\"author\">我</abbr>发<a\r\n                           href=\"mailto:sofish@icloud.com\">邮件</a>。</p>\r\n\r\n\r\n               <h2 id=\"section2\">二、排版实例：</h2>\r\n\r\n               <p>提供2个排版实例，第一个中文实例来自于来自于<cite class=\"typo-unique\">张燕婴</cite>的《论语》，由于古文排版涉及到的元素比较多，所以采用《论语》中《学而》的第一篇作为排版实例介绍；第2个来自到经典的\r\n                   Lorem Ipsum，并加入了一些代码和列表等比较具有代表性的排版元素。</p>\r\n\r\n               <h3 id=\"section2-1\">例1：论语学而篇第一</h3>\r\n\r\n               <p>\r\n                   <small><b>作者：</b><abbr title=\"名丘，字仲尼\">孔子</abbr>（\r\n                       <time>前551年9月28日－前479年4月11日</time>\r\n                       ）\r\n                   </small>\r\n               </p>\r\n\r\n               <h4>本篇引语</h4>\r\n\r\n               <p>\r\n                   《学而》是《论语》第一篇的篇名。《论语》中各篇一般都是以第一章的前二三个字作为该篇的篇名。《学而》一篇包括16章，内容涉及诸多方面。其中重点是「吾日三省吾身」；「节用而爱人，使民以时」；「礼之用，和为贵」以及仁、孝、信等道德范畴。 </p>\r\n\r\n               <h4>原文</h4>\r\n\r\n               <p>子曰：「学而时习之，不亦说乎？有朋自远方来，不亦乐乎？人不知，而不愠，不亦君子乎？」 </p>\r\n\r\n               <h4>译文</h4>\r\n\r\n               <p>孔子说：「学了又时常温习和练习，不是很愉快吗？有志同道合的人从远方来，不是很令人高兴的吗？人家不了解我，我也不怨恨、恼怒，不也是一个有德的君子吗？」 </p>\r\n\r\n               <h4>评析</h4>\r\n\r\n               <p>宋代著名学者<u class=\"typo-u\">朱熹</u>对此章评价极高，说它是「入道之门，积德之基」。本章这三句话是人们非常熟悉的。历来的解释都是：学了以后，又时常温习和练习，不也高兴吗等等。三句话，一句一个意思，前后句子也没有什么连贯性。但也有人认为这样解释不符合原义，指出这里的「学」不是指学习，而是指学说或主张；「时」不能解为时常，而是时代或社会的意思，「习」不是温习，而是使用，引申为采用。而且，这三句话不是孤立的，而是前后相互连贯的。这三句的意思是：自己的学说，要是被社会采用了，那就太高兴了；退一步说，要是没有被社会所采用，可是很多朋友赞同<abbr\r\n                       title=\"张燕婴\">我</abbr>的学说，纷纷到我这里来讨论问题，我也感到快乐；再退一步说，即使社会不采用，人们也不理解我，我也不怨恨，这样做，不也就是君子吗？（见《齐鲁学刊》1986年第6期文）这种解释可以自圆其说，而且也有一定的道理，供读者在理解本章内容时参考。\r\n               </p>\r\n\r\n               <p>此外，在对「人不知，而不愠」一句的解释中，也有人认为，「人不知」的后面没有宾语，人家不知道什么呢？当时因为孔子有说话的特定环境，他不需要说出知道什么，别人就可以理解了，却给后人留下一个谜。有人说，这一句是接上一句说的，从远方来的朋友向我求教，我告诉他，他还不懂，我却不怨恨。这样，「人不知」就是「人家不知道我所讲述的」了。这样的解释似乎有些牵强。</p>\r\n\r\n               <p>总之，本章提出以学习为乐事，做到人不知而不愠，反映出孔子学而不厌、诲人不倦、注重修养、严格要求自己的主张。这些思想主张在《论语》书中多处可见，有助于对第一章内容的深入了解。</p>\r\n\r\n               <h3 id=\"section2-2\">例2：英文排版</h3>\r\n\r\n               <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s\r\n                   standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a\r\n                   type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining\r\n                   essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum\r\n                   passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem\r\n                   Ipsum.</p>\r\n               <blockquote>\r\n                   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\r\n                   aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n               </blockquote>\r\n\r\n               <h4>The standard Lorem Ipsum passage, used since the 1500s</h4>\r\n\r\n               <p>\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\r\n                   aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n                   Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\r\n                   occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p>\r\n\r\n               <h4>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</h4>\r\n\r\n               <p>\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam,\r\n                   eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\r\n                   voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\r\n                   voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\r\n                   velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim\r\n                   ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi\r\n                   consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur,\r\n                   vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</p>\r\n\r\n               <h4>List style in action</h4>\r\n               <ul>\r\n                   <li>If you wish to succeed, you should use persistence as your good friend, experience as your reference, prudence as\r\n                       your brother and hope as your sentry.\r\n                       <p>如果你希望成功，当以恒心为良友，以经验为参谋，以谨慎为兄弟，以希望为哨兵。</p>\r\n                   </li>\r\n                   <li>Sometimes one pays most for the things one gets for nothing.\r\n                       <p>有时候一个人为不花钱得到的东西付出的代价最高。</p>\r\n                   </li>\r\n                   <li>Only those who have the patience to do simple things perfectly ever acquire the skill to do difficult things\r\n                       easily.\r\n                       <p>只有有耐心圆满完成简单工作的人，才能够轻而易举的完成困难的事。</p>\r\n                   </li>\r\n               </ul>\r\n\r\n               <h4>You may want to create a perfect <code>&lt;hr /&gt;</code> line, despite the fact that there will never have one\r\n               </h4>\r\n               <hr/>\r\n               <p><abbr title=\"法国作家罗切福考尔德\">La Racheforcauld</abbr> said:\r\n                   <mark>\"Few things are impossible in themselves; and it is often for want of will, rather than of means, that man fails\r\n                       to succeed\".\r\n                   </mark>\r\n                   You just need to follow the browser\'s behavior, and set a right <code>margin</code> to it。it will works nice as the\r\n                   demo you\'re watching now. The following code is the best way to render typo in Chinese:\r\n               </p>\r\n               <pre><code class=\"language-css\">\r\n/* 标题应该更贴紧内容，并与其他块区分，margin 值要相应做优化 */\r\nh1,h2,h3,h4,h5,h6 {\r\n    line-height:1;font-family:Arial,sans-serif;margin:1.4em 0 0.8em;\r\n}\r\nh1{font-size:1.8em;}\r\nh2{font-size:1.6em;}\r\nh3{font-size:1.4em;}\r\nh4{font-size:1.2em;}\r\nh5,h6{font-size:1em;}\r\n\r\n/* 现代排版：保证块/段落之间的空白隔行 */\r\n.typo p, .typo pre, .typo ul, .typo ol, .typo dl, .typo form, .typo hr {\r\n    margin:1em 0 0.6em;\r\n}</code>\r\n</pre>\r\n\r\n\r\n                   <code class=\"language-css\">\r\n                       System.out.println(\"hello SpringBoot\");\r\n               </code>\r\n\r\n\r\n               <h3 id=\"section3\">三、附录</h3>\r\n\r\n               <h5 id=\"appendix1\">1、<i class=\"serif\">Typo.css</i> 排版偏重点</h5>\r\n               <table class=\"ui table\" summary=\"Typo.css 排版偏重点\">\r\n                   <thead>\r\n                   <tr>\r\n                       <th>类型</th>\r\n                       <th>语义</th>\r\n                       <th>标签</th>\r\n                       <th>注意点</th>\r\n                   </tr>\r\n                   </thead>\r\n                   <tbody>\r\n                   <tr>\r\n                       <th rowspan=\"15\">基础标签</th>\r\n                       <td>标题</td>\r\n                       <td><code>h1</code> ～ <code>h6</code></td>\r\n                       <td>全局不强制大小，<code>.typo</code> 中标题与其对应的内容应紧贴，并且有相应的大小设置</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>上、下标</td>\r\n                       <td><code>sup</code>/<code>sub</code></td>\r\n                       <td>保持与 MicroSoft Office Word 等程序的日常排版一致</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>引用</td>\r\n                       <td><code>blockquote</code></td>\r\n                       <td>显示/嵌套样式</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>缩写</td>\r\n                       <td><code>abbr</code></td>\r\n                       <td>是否都有下划线，鼠标 <code>hover</code> 是否为帮助手势</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>分割线</td>\r\n                       <td><code>hr</code></td>\r\n                       <td>显示的 <code>padding</code> 和 <code>margin</code>正确</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>列表</td>\r\n                       <td><code>ul</code>/<code>ol</code>/<code>dl</code></td>\r\n                       <td>在全局没有 <code>list-style</code>，在 .<code>typo</code> 中对齐正确</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>定义列表</td>\r\n                       <td><code>dl</code></td>\r\n                       <td>全局 <code>padding</code> 和 <code>margin</code>为0， .<code>typo</code> 中对齐正确</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>选项</td>\r\n                       <td><code>input[type=radio[, checkbox]]</code></td>\r\n                       <td>与其他 <code>form</code> 元素排版时是否居中</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>斜体</td>\r\n                       <td><code>i</code></td>\r\n                       <td>只设置一种斜体，让 <code>em</code> 和 <code>cite</code> 显示为正体</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>强调</td>\r\n                       <td><code>em</code></td>\r\n                       <td>在全局显示正体，在 <code>.typo</code> 中显示与 <code>b</code> 和 <code>strong</code> 的样式一致，为粗体</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>加强</td>\r\n                       <td><code>strong/b</code></td>\r\n                       <td>显示为粗体</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>标记</td>\r\n                       <td><code>mark</code></td>\r\n                       <td>类似荧光笔</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>印刷</td>\r\n                       <td><code>small</code></td>\r\n                       <td>保持为正确字体的 80% 大小，颜色设置为浅灰色</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>表格</td>\r\n                       <td><code>table</code></td>\r\n                       <td>全局不显示线条，在 <code>table</code> 中显示表格外框，并且表头有浅灰背景</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>代码</td>\r\n                       <td><code>pre</code>/<code>code</code></td>\r\n                       <td>字体使用 <code>courier</code> 系字体，保持与 <code>serif</code> 有比较一致的显示效果</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <th rowspan=\"5\">特殊符号</th>\r\n                       <td>着重号</td>\r\n                       <td><em class=\"typo-em\">在文字下加点</em></td>\r\n                       <td>在支持 <code>:after</code> 和 <code>:before</code> 的浏览器可以做渐进增强实现</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>专名号</td>\r\n                       <td><u>林建锋</u></td>\r\n                       <td>专名号，有下划线，使用 <code>u</code> 或都 <code>.typo-u</code> 类</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>破折号</td>\r\n                       <td>——</td>\r\n                       <td>保持一划，而非两划</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>人民币</td>\r\n                       <td>&yen;</td>\r\n                       <td>使用两平等线的符号，或者 HTML 实体符号 <code>&amp;yen;</code></td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>删除符</td>\r\n                       <td>\r\n                           <del>已删除（deleted）</del>\r\n                       </td>\r\n                       <td>一致化各浏览器显示，中英混排正确</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <th rowspan=\"3\">加强类</th>\r\n                       <td>专名号</td>\r\n                       <td><code>.typo-u</code></td>\r\n                       <td>由于 <code>u</code> 被 HTML4 放弃，在向后兼容上推荐使用 <code>.typo-u</code></td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>着重符</td>\r\n                       <td><code>.typo-em</code></td>\r\n                       <td>利用 <code>:after</code> 和 <code>:before</code> 实现着重符</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>清除浮动</td>\r\n                       <td><code>.clearfix</code></td>\r\n                       <td>与一般 CSS Reset 保持一对致 API</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <th rowspan=\"5\">注意点</th>\r\n                       <td colspan=\"3\">（1）中英文混排行高/行距</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td colspan=\"3\">（2）上下标在 IE 中显示效果</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td colspan=\"3\">（3）块/段落分割空白是否符合设计原则</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td colspan=\"3\">（4）input 多余空间问题</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td colspan=\"3\">（5）默认字体色彩，目前采用 <code>#333</code> 在各种浏览显示比较好</td>\r\n                   </tr>\r\n                   </tbody>\r\n               </table>\r\n\r\n               <h5 id=\"appendix2\">2、开源许可</h5>','2020-11-02 09:06:43','https://unsplash.it/800/600?image=1033','原创','','','文章格式测试','2020-11-15 08:49:01',72,38,1,'1w1w1'),(38,'\0','\0','[有道云文章](http://note.youdao.com/s/JoD59C6S \"有道云文章\")## 这是我的java心得\r\n**java基础**\r\n- java常用集合工具类\r\n- *java多线程*\r\n- ~~java网络通信~~\r\n- > java的I/O流\r\n\r\nweb开发\r\n[这是百度的链接](http://www.baidu.com \"这是百度的链接\")\r\n\r\n\r\n------------\r\n<p>\r\n这是一个图片\r\n</p>\r\n<img src=\"https://unsplash.it/800/450?image=1014\">\r\n<p>\r\n这是一个QQ二维码\r\n</p>\r\n <img src=\"/images/1.jpg\">\r\n\r\n\r\n\r\n\r\n\r\n','2020-11-13 09:18:59','https://unsplash.it/800/600?image=1022','原创','','','我来写一篇文章吧','2020-11-13 10:28:07',28,54,1,''),(39,'','\0','	就你对多了  那就拿你练手吧\r\n	哈哈哈','2020-11-14 19:12:12','https://unsplash.it/800/600?image=1020','原创','','\0','spring入门到入坟','2020-11-14 19:12:12',3,38,1,'这是哪来验证type翻页的'),(40,'','\0','深入走进java深渊','2020-11-14 19:13:36','https://unsplash.it/800/600?image=1020','翻译','','\0','java无尽','2020-11-14 19:13:36',3,54,1,'你注视着深渊那么深渊也在注视着你'),(41,'\0','','学习学习再学习','2020-11-14 19:14:32','https://unsplash.it/800/600?image=1033','原创','','\0','不悔一生','2020-11-15 09:36:21',7,54,1,'用有限的生命学习无限的知识才是人间真理'),(42,'','','## java   I/O流\r\n\r\n### BIO\r\n\r\n* #### BIO面向流的一种同步阻塞流(jdk1.4以前的唯一选择)，它相关的类和接口在java.io中\r\n\r\n  一个客户端对应服务器端的一个线程，线程是有开销的，对于客服端而言当不传输数据时，则会把当前线程阻塞。\r\n\r\n  ![BIO模型图](/tilePages/BIO模型图.png)\r\n  优点：可以及时收到客户端的请求，并进行相应处理。\r\n  缺点：太耗费服务器端的性能，浪费资源，因为它的连接在不使用时，并不会断开，仍然是占有的状态，并保持阻塞的。\r\n  适用创景:\r\n  适用于连接数目小、且固定的架构中，这是由它的优缺点所决定的\r\n\r\n  ```java\r\n  //服务器端\r\n  //声明一个服务器端以及监听的端口号\r\n  ServerSocket serverSocket = new ServerSocket(5050);\r\n  //创建一个线程池用以对接客户端\r\n          ExecutorService pool = Executors.newCachedThreadPool();\r\n  //循环判断，是否有客户端连接进来\r\n          while (true){\r\n              System.out.println(\"有人连接我吗？\");\r\n  //一旦监听到客户端，就从线程池中取一个线程用以对接,然后主线程再继续判断是否有客户端前来连接\r\n              Socket socket = serverSocket.accept();\r\n              System.out.println(\"客宾一位楼上请.....\");\r\n           //***************************\r\n              pool.execute(new Runnable() {\r\n                  @Override\r\n                  public void run() {\r\n                      try {\r\n                          InputStream inputStream = socket.getInputStream();\r\n                          byte[] bytes = new byte[1024];\r\n                          int len=inputStream.read(bytes);\r\n                          while(len!=-1){\r\n                              System.out.println(Thread.currentThread().getName()+\"----->\"+new String(bytes,0,len));\r\n                              len=inputStream.read(bytes);\r\n                          }\r\n                          System.out.println(Thread.currentThread().getName()+\"撤离了.....\");\r\n                      } catch (IOException e) {\r\n                          e.printStackTrace();\r\n                      }\r\n                  }\r\n              });\r\n        //**************************\r\n          }\r\n  ```\r\n\r\n  ```java\r\n  //客户端 \r\n  try {\r\n      //创建一个socket客户端，在其中填入要访问的域名以及端口号\r\n              Socket socket = new Socket(\"127.0.0.1\", 5050);\r\n              Scanner input = new Scanner(System.in);\r\n              while (true){\r\n        //循环判断是否有数据发送，一旦有数据发送就调用它本身的outputStream方法用以发送数据给服务器端          \r\n                  System.out.println(\"请输入待发送信息:\");\r\n                  String next = input.next();\r\n                  if (next!=null){\r\n                      OutputStream outputStream = socket.getOutputStream();\r\n                      outputStream.write(next.getBytes());\r\n                  }else{\r\n                      break;\r\n                  }\r\n              }\r\n          } catch (IOException e) {\r\n              e.printStackTrace();\r\n          }\r\n  ```\r\n\r\n  \r\n\r\n  可以看到：每一个客户端对应于服务器端的一条线程，当不客户端不发送数据时，服务器端就阻塞在读入或写入的那个地方，造成浪费资源。\r\n\r\n  基于事件驱动的----有则干活无则等待!\r\n\r\n### NIO\r\n\r\n  * #### NIO面向缓存区的一种同步非阻塞流(jdk1.4引入的一种新IO流)\r\n\r\n  ![BIO模型图](/tilePages/NIO模型图.png)\r\n\r\n  一个线程对应多个客户端，服务器端开启一个线程轮询访问客户端，有信息传输时，就把这个信息拿走，没有就下一个，如果这个线程服务的所有客户端都没有信息传输，就直接返回，它的核心是不管有没有信息，我只走一遍，有就带走，没有就拉倒\r\n\r\n---\r\n\r\n  **selector、channel、buffer关系：**\r\n\r\n  * 一个线程对应一个selector\r\n  * 服务器端可以有多个selector，一个selector对应多个channel，一个channel对应一个buffer，一个buffer对应个客户端\r\n  * selector根据事件，去获取具体的channel，基于事件驱动的一个关系\r\n  * channel是双向通信的，可以反映底层操作系统的情况\r\n  * buffer是双向的可以读、也可以写，不过需要flip来显示的进行切换\r\n\r\n-------\r\n\r\n**buffer定义了四个属性**\r\n\r\n**capacity：**当前buffer所能容纳的最大数据个数，在buffer初始化的时候就定下来了，且是*不可修改的*，是buffer缓冲区的容量长度。\r\n\r\n**limit：**表示缓冲区的当前的终点，因为buffer的读取或者存储是自增的/自减的，设立这个值以后，即保证不能超出buffer的最大用量，在这里的这个容量是指，当前buffer中数据的个数，可以把limit理解为当前buffer的数据长度，防止越界，但是这个**limit值是可以修改的**\r\n\r\n**position:**下一次读取或写入元素时的索引位置。可以修改\r\n\r\n**mark:**一个标志位，用来标志当前的position位置，在我们需要时可以通过reset方法来让position回到mark标记的地方，即允许有一个返回的过程\r\n\r\n在写buffer的时候，buffer会跟踪写入了多少数据，需要读buffer的时候，需要调用flip()来将buffer从写模式切换成读模式，**读模式中只能读取写入的数据，而非整个buffer。**\r\n当数据都读完了，你需要清空buffer以供下次使用，可以有2种方法来操作：**调用clear() **或者**调用compact()**。\r\n区别：clear方法清空整个buffer，compact方法只清除你已经读取的数据，未读取的数据会被移到buffer的开头，此时写入数据会从当前数据的末尾开始。\r\n\r\n-----\r\n\r\n**channel**\r\n\r\n* channel是一个接口\r\n\r\n* 常用的四个实现类：FileChannel、DataGramChannel、ServerSocketChannel、SocketChannel\r\n\r\n  1）、FileChannel：向文件当中读写数据；\r\n\r\n  ​		常用方法：read、write、transFerFrom、transFerTo\r\n\r\n  2）、DatagramChannel：通过UDP协议向网络读写数据；\r\n  3）、SocketChannel：通过TCP协议向网络读写数据；\r\n  4）、ServerSocketChannel：以一个web服务器的形式，监听到来的TCP连接，对每个连接建立一个SocketChannel。\r\n\r\n  ```java\r\n  //四种channel获取方式\r\n      ServerSocketChannel channel = new ServerSocket().getChannel();\r\n      SocketChannel channel1 = new Socket().getChannel();\r\n      FileChannel fileChannel = new FileOutputStream().getChannel();\r\n      DatagramChannel datagramChannel = new DatagramSocket().getChannel();\r\n  ```\r\n\r\n  ```java\r\n  //filechannel向文件中写入数据		\r\n      String str=\"hello world !\";\r\n      FileChannel fileChannel = new FileOutputStream(\"d:\\\\file01.txt\").getChannel();\r\n      ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\r\n      byteBuffer.put(str.getBytes());\r\n      byteBuffer.flip();\r\n      fileChannel.write(byteBuffer);\r\n  ```\r\n\r\n  ```java\r\n  //filechannel从文件中读取数据\r\n      File file = new File(\"d:\\\\file01.txt\");\r\n      FileChannel fileChannel = new FileInputStream(file).getChannel();\r\n      ByteBuffer byteBuffer = ByteBuffer.allocate((int)file.length());\r\n      fileChannel.read(byteBuffer);\r\n      byteBuffer.flip();\r\n      System.out.println(new String(byteBuffer.array()));\r\n  ```\r\n\r\n  ```java\r\n  //从一个channel中读取数据，再放到另一个channel中，即实现一个复制\r\n  //在这要注意一点的就是，从一个读即被读的那个channel必须是---可输入类型的channel--- 即可以被读的一个channel\r\n  //被写的那个channel必须是一个可以被写的channel，否则会报异常NonWriteableChannel  ----> NonWritableChannelException\r\n      File file = new File(\"file01\");\r\n      FileChannel channel = new FileInputStream(file).getChannel();\r\n      FileChannel channel1 = new FileOutputStream(\"file02\").getChannel();\r\n      ByteBuffer byteBuffer = ByteBuffer.allocate((int) file.length());\r\n      channel.read(byteBuffer);\r\n      byteBuffer.flip();\r\n      channel1.write(byteBuffer);\r\n  ```\r\n\r\n   **把buffer转为只读buffer，--->buffer.asReadOnlyBuffer();**\r\n\r\n   **MappedByteBuffer**，可以在堆外内存直接对数据进行修改，系统不需要再单独拷贝一份进行修改。\r\n\r\n  * 参数解读：\r\n\r\n    1、这个map的权限：有读写、只读、private（写时拷贝-->Mode for a private (copy-on-write) mapping.）\r\n\r\n    2.开始修改的位置\r\n\r\n    3.允许修改的最大长度\r\n\r\n\r\n**selector**\r\n\r\n* 一个线程对应一个selector，一个selector可以对应多个channel(通道)，且是轮询访问，channel通过事件驱动的方式，来请求selector进行处理，一旦某个channel有响应事件到达了selector中，则selector就会去处理这个channel的数据，若是当前所有的selector下的channel都没有数据进行传输，则seletor还可以去做其他事情，这就是非阻塞的核心要义，不再是每一个channel一个线程，在这里用了多路复用器，即多个channel共享一个线程，有数据传输，就调用，没有也无需阻塞等待，这在很大程度上，降低了服务器端的性能损耗，同时也降低了频繁的线程切换，在很大程度上提升了数据传输的效率。\r\n\r\n* **selector是一个抽象类**    <u>每一个channel对应一个selectionKey，当channel触发事件时则把其对应的selectionKey返回</u>\r\n\r\n  ​	①selector轮询，当有事件触发时，则会返回一个selectionKeys的set集合\r\n\r\n  ```java\r\n  Set<SelectionKey> selectionKeys = selector.selectedKeys();\r\n  ```\r\n\r\n  ​	②然后可以遍历这个selectionKeys的set集合获取每一个selectionKey，再获取key中的具体SocketChannel和其对应的服务器端的buffer缓冲区\r\n\r\n  * select(long timeout)方法，等待timeout的时间若是没有，channel进行数据传输，则直接返回，若有,则把触发事件的channel加入到selet集合并返回，\r\n  * selectKeys（）从内部集合中得到所有注册的selectionKey\r\n  * selectNow轮训一遍就立马返回，不再等待\r\n  * wakeup唤醒某个阻塞的selector\r\n  * select（）轮询一遍后若没有selectionKey加入，则阻塞\r\n\r\n* **channel注册到seletor的过程**\r\n\r\n  * 客户端连接到服务器端后，服务器端会生成它对应的socketChannel。\r\n  * 服务器端调用register方法，将其注册到selector\r\n  * 注册完成以后，会返回一个selectionKey用以对接socketChannel\r\n  * 之后selector调用select方法进行轮询判断那个socketChannel有数据传输，一旦有数据传输，则把该channel对应的selectionKey返回\r\n  * 服务器端，通过selectionKey反向获取socketChannel，进而进行数据传输。\r\n\r\n  ```java\r\n  //nio简单示例\r\n  //创建一个serveSocketChannel服务端\r\n  ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\r\n  //创建一个selector选择器\r\n          Selector selector = Selector.open();\r\n  //声明服务端监听的端口号\r\n          InetSocketAddress inetSocketAddress = new InetSocketAddress(5050);\r\n  //将服务器端绑定到该端口\r\n          serverSocketChannel.socket().bind(inetSocketAddress);\r\n  //将服务端置为非阻塞的模式\r\n          serverSocketChannel.configureBlocking(false);\r\n  //将服务端注册到selector选择器中\r\n          serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);\r\n          while (true){\r\n              //selector开启轮询，查看是否有客户端前来连接\r\n              int i = selector.selectNow();\r\n              if (i==0){\r\n                  //用以模拟服务器端做其他事情\r\n                  System.out.println(\"没有连接，我做其他的事情去!\");\r\n                  try {\r\n                      Thread.sleep(3000);\r\n                  } catch (InterruptedException e) {\r\n                      e.printStackTrace();\r\n                  }\r\n                  continue;\r\n              }else{\r\n                  //一旦selector发下有客户端的事件触发\r\n                  Set<SelectionKey> selectionKeys = selector.selectedKeys();\r\n                  Iterator<SelectionKey> iterator = selectionKeys.iterator();\r\n                //就开始遍历，  \r\n                  while (iterator.hasNext()){\r\n                      SelectionKey selectionKey = iterator.next();\r\n                      //若是连接请求，则进行连接\r\n                      if (selectionKey.isAcceptable()){\r\n                          System.out.println(\"有人来连接了诶\");\r\n                          //通过服务器端创建与之对应的客户端socket\r\n                          SocketChannel socketChannel = serverSocketChannel.accept();\r\n                          System.out.println(socketChannel.hashCode()+\"--->\"+Thread.currentThread().getName());\r\n                          socketChannel.configureBlocking(false);\r\n                          //将客户端注册到selector选择器中\r\n                          socketChannel.register(selector,SelectionKey.OP_READ,ByteBuffer.allocate(1024));\r\n                      }\r\n                      //若是读请求，则开始读操作\r\n                      if (selectionKey.isReadable()){\r\n                          SocketChannel channel = (SocketChannel) selectionKey.channel();\r\n                          ByteBuffer byteBuffer = (ByteBuffer) selectionKey.attachment();\r\n                          channel.read(byteBuffer);\r\n                          System.out.println(new String(byteBuffer.array()));\r\n                          byteBuffer.clear();\r\n                      }\r\n                      iterator.remove();\r\n                  }\r\n              }\r\n  \r\n  \r\n          }\r\n  ```\r\n\r\n  ```java\r\n      //客户端\r\n  \r\n  //创建客户端的socket\r\n      SocketChannel socketChannel = SocketChannel.open();\r\n  //声明将要建立连接的inet地址\r\n          InetSocketAddress inetSocketAddress = new InetSocketAddress(\"127.0.0.1\", 5050);\r\n  //将socket设置为非阻塞的， 读写完之后立马就返回，不阻塞\r\n          socketChannel.configureBlocking(false);\r\n          if (!socketChannel.connect(inetSocketAddress)){\r\n              while (!socketChannel.finishConnect()){\r\n                  System.out.println(\"客户端做自己的事情\");\r\n              }\r\n          }\r\n          if (socketChannel.isConnected()){\r\n              ByteBuffer byteBuffer = ByteBuffer.wrap(\"hello world\".getBytes());\r\n              socketChannel.write(byteBuffer);\r\n          }\r\n          System.in.read();\r\n  ```\r\n\r\n  \r\n\r\n----\r\n\r\n  NIO是面向**缓冲区**的，数据读取到一个它稍后处理的**缓冲区中**，需要时可以**在缓冲区中前后移动**，这就增加了它的灵活性，使用它可以提供非阻塞式的高伸缩性网络\r\n\r\n------\r\n\r\n  优点：很大程度上降低了对服务器的性能要求，可以做到一条线程处理多个客户端的连接，同时它是非阻塞的\r\n\r\n  缺点：不能保证及时处理客户端的请求，且因为它是面向数据块的，当数据块不完整时，不能被处理（读取、写入），还需要额外的为每一个块进行信息标记，若是不完整的则不允许被处理。\r\n\r\n---\r\n\r\n### AIO\r\n\r\n* #### AIO异步非阻塞\r\n\r\n 与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：AsynchronousSocketChannel、AsynchronousServerSocketChannel、AsynchronousFileChannel、AsynchronousDatagramChannel\r\n\r\n  \r\n\r\n  \r\n\r\n','2020-11-17 18:16:28','https://unsplash.it/800/600?image=1065','原创','','','Java之I/O篇','2020-11-17 19:12:14',10,54,1,'看了好多了博客、视频最终总结了这一篇文章，或许还有许多瑕疵，NIO我只想说一句太TM难了');

/*Table structure for table `t_blog_tags` */

DROP TABLE IF EXISTS `t_blog_tags`;

CREATE TABLE `t_blog_tags` (
  `blogs_id` int(11) NOT NULL,
  `tags_id` int(11) NOT NULL,
  KEY `FK5feau0gb4lq47fdb03uboswm8` (`tags_id`),
  KEY `FKh4pacwjwofrugxa9hpwaxg6mr` (`blogs_id`),
  CONSTRAINT `FK5feau0gb4lq47fdb03uboswm8` FOREIGN KEY (`tags_id`) REFERENCES `t_tag` (`id`),
  CONSTRAINT `FKh4pacwjwofrugxa9hpwaxg6mr` FOREIGN KEY (`blogs_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_blog_tags` */

/*Table structure for table `t_comment` */

DROP TABLE IF EXISTS `t_comment`;

CREATE TABLE `t_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nick_name` varchar(255) DEFAULT NULL,
  `blog_id` int(11) DEFAULT NULL,
  `parent_comment_id` int(11) DEFAULT NULL,
  `owner` bit(1) DEFAULT b'0',
  PRIMARY KEY (`id`),
  KEY `FKke3uogd04j4jx316m1p51e05u` (`blog_id`),
  KEY `FK4jj284r3pb7japogvo6h72q95` (`parent_comment_id`),
  CONSTRAINT `FK4jj284r3pb7japogvo6h72q95` FOREIGN KEY (`parent_comment_id`) REFERENCES `t_comment` (`id`),
  CONSTRAINT `FKke3uogd04j4jx316m1p51e05u` FOREIGN KEY (`blog_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8;

/*Data for the table `t_comment` */

insert  into `t_comment`(`id`,`avatar`,`content`,`create_time`,`email`,`nick_name`,`blog_id`,`parent_comment_id`,`owner`) values (5,'/images/avatar.jpeg','按老孙来页','2020-11-14 11:38:10','zhangsan@163.com','孙悟空',37,NULL,'\0'),(6,'/images/avatar.jpeg','我来给你留个言把','2020-11-14 11:38:53','lisi@126.com','我是好心人',26,NULL,'\0'),(7,'/images/avatar.jpeg','你的阅读量好少啊 我来给你留个言把','2020-11-14 11:55:12','1162532214@qq.com','做好事不留名',11,NULL,'\0'),(8,'/images/avatar.jpeg','你怎么可以如此之秀','2020-11-14 11:59:08','zhangsan@163.com','张三',11,7,'\0'),(9,'/images/avatar.jpeg','你好我来评论了','2020-11-14 15:45:04','1162532214@qq.com','王',14,NULL,'\0'),(10,'/images/avatar.jpeg','王啊 我来评论你了','2020-11-14 15:45:19','zhangsan@163.com','张',14,9,'\0'),(11,'/images/avatar.jpeg','张啊 我来评论你了','2020-11-14 15:45:38','lisi@126.com','李',14,10,'\0'),(12,'/images/avatar.jpeg','猴子你下来让我坐会第一','2020-11-14 16:24:16','1162532214@qq.com','唐僧',37,5,'\0'),(13,'/images/avatar.jpeg','师傅 我也想做宝座 哼哼','2020-11-14 16:28:08','lisi@126.com','猪八戒',37,12,'\0'),(14,'/images/avatar.jpeg','呆子  你下来 让师傅上去 再多BB 俺老孙一棒子打死你','2020-11-14 16:42:52','1162532214@qq.com','孙悟空',37,13,'\0'),(26,'/images/avatar.jpeg','算了 我在开一条评论吧 别把人家服务器给搞蹦了再','2020-11-14 16:58:12','wangwu@126.com','王五',36,NULL,'\0'),(28,'/images/avatar.jpeg','好了好了 你们俩 安静点 这是别人博客园 要吵吵回你们自己家吵吵去  这么大了 还不让我省心','2020-11-14 17:12:13','tangseng@126.com','唐僧',37,NULL,'\0'),(29,'/images/avatar.jpeg','五哥 你这忒假了  不过我喜欢  哈哈哈','2020-11-14 17:12:56','lisi@126.com','李四',36,26,'\0'),(30,'/images/avatar.jpeg','溜了溜了 我怕 博主 打我','2020-11-14 17:14:05','wangwu@126.com','王五',36,NULL,'\0'),(31,'/images/avatar.jpeg','有你鸡毛事  你别TMBB  真是咸吃萝卜淡操心 给你惯的','2020-11-14 17:23:04','lisi@126.com','猪八戒',37,14,'\0'),(32,'/images/avatar.jpeg','我艹了  你给我等着  我今天不拆了你家  我老孙跟你姓','2020-11-14 17:24:00','sunwukong@126.com','孙悟空',37,31,'\0'),(33,'/images/avatar.jpeg','我孙悟空今天正式在此声明 我没有猪八戒这个sb队友 我不堪与他为伍','2020-11-14 17:24:46','sunwukong@126.com','孙悟空',37,NULL,'\0'),(34,'/images/avatar.jpeg','我张三 来了  还不快来接驾','2020-11-14 17:26:44','zhangsan@163.com','张三',36,NULL,'\0'),(35,'/images/avatar.jpeg','我也来了','2020-11-14 18:07:36','zhaoliu@126.com','赵六',36,NULL,'\0'),(36,'/images/avatar.jpeg','小李子 休得猖狂','2020-11-14 18:08:38','dadi@126.com','玉皇大帝',36,29,'\0'),(37,'/images/avatar.jpeg','你们都在这干哈呢 干哈呢  ','2020-11-14 18:16:21','bozhu@126.com','博主',14,NULL,'\0'),(38,'/images/avatar.jpeg','我是博主','2020-11-14 19:01:53','1162532214@qq.com','嘿嘿',37,NULL,'\0'),(39,'/images/avatar.jpeg','我才是真的博主','2020-11-14 19:02:21','123@qq.com','饭否',37,NULL,'\0'),(40,'/images/avatar.jpeg','你们都是假的  我才是真正的博主','2020-11-14 19:04:11','123@qq.com','饭否',37,NULL,''),(41,'/images/avatar.jpeg','你刚才没改数据库保存操作呢 还','2020-11-14 19:04:32','123@qq.com','饭否',37,39,''),(42,'/images/avatar.jpeg','你这个  小鬼 竟然敢冒充我','2020-11-14 19:04:53','123@qq.com','饭否',37,38,''),(43,'/images/avatar.jpeg','博主大大饶命啊   小的再也不敢了....','2020-11-14 19:06:09','1162532214@qq.com','嘿嘿',37,42,'\0'),(44,'/images/avatar.jpeg','哇 这个可以评论诶','2020-11-15 09:34:52','wang@126.com','王',27,NULL,'\0'),(45,'/images/avatar.jpeg','太秀了吧 老哥 优秀优秀 真棒','2020-11-17 18:18:23','123@qq.com','饭否',42,NULL,''),(46,'/images/avatar.jpeg','文章或许还有许多不足之处欢迎大家批评指正','2020-11-17 18:18:54','123@qq.com','饭否',42,NULL,''),(47,'/images/avatar.jpeg','ni hao ','2020-12-28 16:38:13','','',42,NULL,'\0'),(48,'/images/avatar.jpeg','hahah ','2020-12-28 16:38:32','12821@163.com','wnag ',42,NULL,'\0'),(49,'/images/avatar.jpeg','我来评论了','2021-01-26 12:37:24','123@qq.com','饭否',37,NULL,''),(50,'/images/avatar.jpeg','撒旦王','2021-01-26 12:39:14','123@qq.com','饭否',41,NULL,''),(51,'/images/avatar.jpeg','','2021-02-26 21:03:31','123@qq.com','饭否',27,NULL,'');

/*Table structure for table `t_tag` */

DROP TABLE IF EXISTS `t_tag`;

CREATE TABLE `t_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

/*Data for the table `t_tag` */

insert  into `t_tag`(`id`,`name`) values (12,'springboot'),(13,'jvm'),(14,'多线程'),(15,'java常用集合');

/*Table structure for table `t_type` */

DROP TABLE IF EXISTS `t_type`;

CREATE TABLE `t_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL COMMENT '类别名称',
  `blognums` int(11) DEFAULT '0' COMMENT '对应的blog数量',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8;

/*Data for the table `t_type` */

insert  into `t_type`(`id`,`name`,`blognums`) values (38,'mybatis',4),(52,'js',1),(54,'java',7),(55,'spring',0),(56,'多线程',0),(57,'jvm',0),(58,'java常用集合',0),(59,'springmvc',0),(60,'css',0);

/*Table structure for table `t_user` */

DROP TABLE IF EXISTS `t_user`;

CREATE TABLE `t_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` date DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nick_name` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `update_time` date DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Data for the table `t_user` */

insert  into `t_user`(`id`,`avatar`,`create_time`,`email`,`nick_name`,`password`,`type`,`update_time`,`username`) values (1,'https://unsplash.it/100/100?image=1033','2020-11-01','123@qq.com','饭否','123',1,'2020-11-03','admin'),(2,'https://unsplash.it/100/100?image=1040','2020-11-12','235@qq.com','可否','123',2,'2020-11-12','java');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
